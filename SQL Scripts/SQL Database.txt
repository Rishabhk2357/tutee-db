/* ==============================================================================================
Version 2.0

Property of Raghav Khator

Tutee Database 

DATE = 7/9/18  7:46 AM

============================================================================================== */


-- Stores information about volunteers
CREATE Table Volunteer 
(
VOLUNTEER_ID decimal(8) NOT NULL IDENTITY(1,1) PRIMARY KEY,
VOLUNTEER_FIRST_NAME varchar(255) NOT NULL,
VOLUNTEER_LAST_NAME varchar(255) NOT NULL,
VOLUNTEER_EMAIL varchar(255) NOT NULL,
VOLUNTEER_NUMBER varchar(255) NOT NULL,
VOLUNTEER_ROLE varchar(255) NOT NULL,
VOLUNTEER_USER varchar(255) NOT NULL UNIQUE,
VOLUNTEER_PASS varchar(255) NOT NULL

);

-- Stores information about the different types of programs (after school or teacher helper)
-- Will be used to diffentiate wich front end the school will see and which logic will run
CREATE Table Programs 
(
PROGRAM_ID decimal(8) NOT NULL IDENTITY(1,1) PRIMARY KEY,
PROGRAM_TYPE varchar(255) NOT NULL UNIQUE,
);

-- Stores the information about the schools we partner with
CREATE Table Schools
(
SCHOOL_ID decimal(8) NOT NULL IDENTITY(1,1) PRIMARY KEY,
SCHOOL_NAME varchar(255)  NOT NULL UNIQUE,
SCHOOL_LEVEL varchar(255)  NOT NULL,
PAIRED_SCHOOL_ID decimal(8)  NOT NULL,
PROGRAM_ID decimal(8) NOT NULL,
COUNSELOR_FIRST_NAME varchar(255) NOT NULL,
COUNSELOR_LAST_NAME varchar(255) NOT NULL,
COUNSELOR_EMAIL varchar(255) NOT NULL,
COUNSELOR_NUMBER varchar(255) NOT NULL,
MANAGER_ID decimal(8)  NOT NULL, -- This must be a H2O Manager so put this as a check
FOREIGN KEY (PAIRED_SCHOOL_ID) REFERENCES Schools(SCHOOL_ID),
FOREIGN KEY (PROGRAM_ID) REFERENCES Programs(PROGRAM_ID),
FOREIGN KEY (MANAGER_ID) REFERENCES Volunteer(VOLUNTEER_ID),
CHECK (SCHOOL_LEVEL='Middle School' or SCHOOL_LEVEL='Elementary School')
);

-- Stores information about tutee that a volunteer can access
CREATE Table Tutee 
(
TUTEE_STUDENT_ID decimal(8) NOT NULL,
TUTEE_FIRST_NAME varchar(255) NOT NULL,
TUTEE_LAST_NAME varchar(255) NOT NULL,
GRADE int NOT NULL,
SCHOOL_ID decimal(8)   NOT NULL,  
PARENT_FIRST_NAME varchar(255) NOT NULL,
PARENT_LAST_NAME varchar(255) NOT NULL,
PARENT_EMAIL varchar(255) NOT NULL,
PARENT_NUMBER varchar(255) NOT NULL,
TEACHER_FIRST_NAME varchar(255) NOT NULL,
TEACHER_LAST_NAME varchar(255) NOT NULL,
TEACHER_EMAIL varchar(255) NOT NULL,
TEACHER_NUMBER varchar(255) NOT NULL,
PRIMARY KEY (TUTEE_STUDENT_ID),
FOREIGN KEY (SCHOOL_ID) REFERENCES Schools(SCHOOL_ID),
CHECK (grade<7)
);

-- Stores information about tutor that a volunteer can access
CREATE Table Tutor 
(
TUTOR_STUDENT_ID decimal(8) NOT NULL,
TUTOR_FIRST_NAME varchar(255) NOT NULL,
TUTOR_LAST_NAME varchar(255) NOT NULL,
TUTOR_EMAIL varchar(255) NOT NULL,
GRADE int NOT NULL,
SCHOOL_ID decimal(8)  NOT NULL,  
PARENT_FIRST_NAME varchar(255) NOT NULL,
PARENT_LAST_NAME varchar(255) NOT NULL,
PARENT_EMAIL varchar(255) NOT NULL,
PARENT_NUMBER varchar(255) NOT NULL,
PRIMARY KEY (TUTOR_STUDENT_ID),
FOREIGN KEY (SCHOOL_ID) REFERENCES Schools(SCHOOL_ID),
CHECK (grade>6)
);

-- Stores the review a tutor writes at the end of every session
CREATE Table Review 
(
REVIEW_ID decimal(8) NOT NULL IDENTITY(1,1) PRIMARY KEY,
TUTEE_STUDENT_ID decimal(8) NOT NULL,
TUTOR_STUDENT_ID decimal(8) NOT NULL,
MIDDLE_SCHOOL_ID decimal(8)  NOT NULL,  
DATE_OF_SESSION datetime  NOT NULL DEFAULT getdate(),  
TOPICS varchar(250)  NOT NULL,
STRENGTHS varchar(250)  NOT NULL,
WEAKNESSES varchar(250)  NOT NULL,
EXTRA_COMMENTS varchar(250)  NOT NULL DEFAULT 'None',
FOREIGN KEY (TUTEE_STUDENT_ID) REFERENCES Tutee(TUTEE_STUDENT_ID),
FOREIGN KEY (TUTOR_STUDENT_ID) REFERENCES Tutor(TUTOR_STUDENT_ID),
FOREIGN KEY (MIDDLE_SCHOOL_ID) REFERENCES Schools(SCHOOL_ID),
);

GO
CREATE PROCEDURE GetAllMiddleSchools
AS 
SELECT * FROM Schools WHERE Schools.SCHOOL_LEVEL = 'Middle School'
GO

GO
CREATE PROCEDURE GetAllElementarySchools
AS 
SELECT * FROM Schools WHERE Schools.SCHOOL_LEVEL = 'Elementary School'
GO

GO
CREATE PROCEDURE GetAllChildrenSchools -- Needs to be made better just in case MS entered doesn't exist
@MiddleSchool varchar(255)
AS 
DECLARE @msID int
SELECT @msID = SCHOOL_ID FROM Schools WHERE SCHOOL_NAME = @MiddleSchool
SELECT * FROM Schools WHERE Schools.PAIRED_SCHOOL_ID = @msID
GO

GO
CREATE PROCEDURE GetAllMiddleSchoolsOfProgramID
@programID int
AS 
SELECT * FROM Schools WHERE Schools.PROGRAM_ID = @programID
GO

GO
CREATE PROCEDURE GetAllMiddleSchoolsOfProgram -- 
@program varchar(255)
AS
DECLARE @pID int
SELECT @pID = PROGRAM_ID FROM Programs WHERE PROGRAM_TYPE = @program 
SELECT * FROM Schools WHERE Schools.PROGRAM_ID = @pID and SCHOOL_LEVEL = 'Middle School'
GO

GO
CREATE PROCEDURE GetGradeDistributionForSchool --Have to check if what they entered is a ES not a MS
@school varchar(255)
AS
DECLARE @esID int
SELECT @esID = SCHOOL_ID FROM Schools WHERE SCHOOL_NAME = @school
SELECT GRADE, count(GRADE) FROM Tutee WHERE SCHOOL_ID = @esID GROUP BY GRADE ORDER BY GRADE 
GO
